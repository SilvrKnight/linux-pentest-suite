#CREATED BY SILVRKNIGHT
#GITHUB == https://github.com/SilvrKnight/linux-pentest-suite
import os
import requests
import queue
import threading
import socket
import sys
import whois
import dns.resolver
import shodan
from hashlib import md5, sha1, sha256
from time import time

def clear_screen():
    if sys.platform.startswith('win'):
        os.system('cls')
    else:
        os.system('clear')

#-------------------------------------------------------------------------------------------------------

def main_menu():
    clear_screen()
    os.system('figlet -f future -c Linux Pentest Suite | lolcat')
    os.system("echo '                              version ==  1.0 '| lolcat ")

    print("\n")
    os.system("echo '\033[1;33mWelcome to the Linux Pentest Suite!\033[0m' | lolcat")

    os.system("echo 'Please select a Module:' | lolcat")
    os.system("echo '' | lolcat ")

    os.system("echo '1) Port Scanner' | lolcat")
    os.system("echo '2) Footprinting' | lolcat")
    os.system("echo '3) Directory Brute Force' | lolcat")
    os.system("echo '4) Hash Cracker' | lolcat")
    os.system("echo '5) About' | lolcat")
    os.system("echo '6) Quit the Framework' | lolcat")
    choice = input("\nEnter your choice ==> ")

    options = {
        '1': port_scanner,
        '2': footprinting_menu,
        '3': directory_brute_force,
        '4': hash_cracker,
        '5': about,
        '6': quit_framework
    }

    selected_option = options.get(choice)
    if selected_option:
        selected_option()
    else:
        os.system("echo 'Invalid option. Please try again.' | lolcat")
        input("Press Enter to continue...")
        main_menu()

#-------------------------------------------------------------------------------------------------------

def port_scanner():
    clear_screen()
    os.system('figlet -f future -c Port Scanner | lolcat')

    host = input("Enter the target host: ")
    ports = get_ports_option()

    print(f"\nScanning {host}...\n")

    open_ports = []
    for port in ports:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((host, port))
            if result == 0:
                open_ports.append(port)
            sock.close()
        except socket.error:
            pass

    if open_ports:
        print("Open Ports:")
        for port in open_ports:
            print(f"Port {port}: Open")
    else:
        print("No open ports found.")

    input("\nPress Enter to continue...")
    main_menu()


def get_ports_option():
    while True:
        option = input("Enter your choice:\n1) Scan specific ports\n2) Scan range of ports\n")
        if option == '1':
            ports = input("Enter the specific ports (comma-separated): ").split(",")
            ports = [int(port.strip()) for port in ports]
            return ports
        elif option == '2':
            start_port = int(input("Enter the start port: "))
            end_port = int(input("Enter the end port: "))
            ports = list(range(start_port, end_port + 1))
            return ports
        else:
            os.system("echo 'Invalid option. Please try again.' | lolcat")


#-------------------------------------------------------------------------------------------------------

def directory_brute_force():
    clear_screen()
    os.system('figlet -f future -c Directory Busting | lolcat')

    host = input("Enter the target host: ")
    wordlist_path = input("Enter the path to the wordlist file: ")

    print(f"\nScanning {host}...\n")

    try:
        wordlist_file = open(wordlist_path, 'r')
    except FileNotFoundError:
        print("Wordlist file not found.")
        input("\nPress Enter to continue...")
        main_menu()

    q = queue.Queue()
    threads = 10

    for i in range(threads):
        t = threading.Thread(target=dirb, args=(i, q, host))
        t.daemon = True
        t.start()

    for directory in wordlist_file.read().splitlines():
        url = f"http://{host}/{directory}"  # Add 'http://' to the URL
        q.put(url)

    q.join()
    os.system("echo 'Directory brute force scan completed.' | lolcat ")

    print("\n")
    input("\nPress Enter to continue...")
    main_menu()


def dirb(thread_no, q, host):
    while True:
        url = q.get()
        try:
            response = requests.get(url, allow_redirects=False)
            if response.status_code == 200:
                print("[+] Directory found: {}".format(url))
            else:
                print("[-] Directory not found: {}".format(url))
        except requests.exceptions.RequestException:
            print("[-] Error occurred while accessing: {}".format(url))

        q.task_done()

#-------------------------------------------------------------------------------------------------------

def hash_cracker():
    clear_screen()
    os.system('figlet -f future -c Hash Cracker | lolcat')

    print("Please select a hash algorithm:")
    print("1) MD5")
    print("2) SHA1")
    print("3) SHA256")

    choice = input("\nEnter your choice: ")

    hash_algorithm = None
    if choice == '1':
        hash_algorithm = md5
    elif choice == '2':
        hash_algorithm = sha1
    elif choice == '3':
        hash_algorithm = sha256
    else:
        print("Invalid choice. Please try again.")
        input("\nPress Enter to continue...")
        main_menu()
        return

    hash_value = input("Enter the hash value: ")
    wordlist_path = input("Enter the path to the wordlist file: ")

    print("\n")
    os.system("echo 'Cracking the hash...' | lolcat")
    print("\n")
    try:
        wordlist_file = open(wordlist_path, 'r')
    except FileNotFoundError:
        os.system("echo 'Wordlist file not found.' | lolcat")

        input("\nPress Enter to continue...")
        main_menu()
        return

    start_time = time()

    for password in wordlist_file.read().splitlines():
        hashed_password = hash_algorithm(password.encode()).hexdigest()
        if hashed_password == hash_value:
            print(f"Password found: {password}")
            break

    elapsed_time = time() - start_time
    print(f"\nHash cracking completed in {elapsed_time:.2f} seconds.")

    input("\nPress Enter to continue...")
    main_menu()

#-------------------------------------------------------------------------------------------------------

def footprinting_menu():
    while True:
        clear_screen()
        os.system('figlet -f future -c Footprinting | lolcat')

        os.system('echo "\033[1;33m== LPS - Footprinting Menu ==\033[0m" | lolcat')
        os.system('echo "1. Get WHOIS Info" | lolcat')
        os.system('echo "2. Get DNS Info" | lolcat')
        os.system('echo "3. Get Geolocation Info" | lolcat')
        os.system('echo "4. Get Shodan Info" | lolcat')
        os.system('echo "5. Back to Main Menu" | lolcat')
        choice = input("Enter your choice: ")

        if choice == "1":
            get_whois_info()
        elif choice == "2":
            get_dns_info()
        elif choice == "3":
            get_geolocation_info()
        elif choice == "4":
            get_shodan_info()
        elif choice == "5":
            main_menu()
        else:
            print("Invalid choice. Please try again.\n")


def get_whois_info():
    domain = input("Enter the domain name for footprinting: ")
    print("[+] Getting whois info..")
    whois_result = ''

    try:
        py = whois.query(domain)
        print("[+] whois info found.")
        whois_result += "Name: {}\n".format(py.name)
        whois_result += "Registrar: {}\n".format(py.registrar)
        whois_result += "Creation Date: {}\n".format(py.creation_date)
        whois_result += "Expiration date: {}\n".format(py.expiration_date)
        whois_result += "Registrant: {}\n".format(py.registrant)
        whois_result += "Registrant Country: {}\n".format(py.registrant_country)
    except:
        pass

    print(whois_result)
    input("\nPress Enter to continue...")
    footprinting_menu()


def get_dns_info():
    domain = input("Enter the domain name for footprinting: ")
    print("[+] Getting DNS info..")
    dns_result = ''

    try:
        for a in dns.resolver.resolve(domain, 'A'):
            dns_result += "[+] A Record: {}\n".format(a.to_text())
        for ns in dns.resolver.resolve(domain, 'NS'):
            dns_result += "[+] NS Record: {}\n".format(ns.to_text())
        for mx in dns.resolver.resolve(domain, 'MX'):
            dns_result += "[+] MX Record: {}\n".format(mx.to_text())
        for txt in dns.resolver.resolve(domain, 'TXT'):
            dns_result += "[+] TXT Record: {}\n".format(txt.to_text())
    except:
        pass

    print(dns_result)
    input("\nPress Enter to continue...")
    footprinting_menu()


def get_geolocation_info():
    domain = input("Enter the domain name for footprinting: ")
    print("[+] Getting geolocation info..")
    geo_result = ''

    try:
        response = requests.request('GET', "https://geolocation-db.com/json/" + socket.gethostbyname(domain)).json()
        geo_result += "[+] Country: {}\n".format(response['country_name'])
        geo_result += "[+] Latitude: {}\n".format(response['latitude'])
        geo_result += "[+] Longitude: {}\n".format(response['longitude'])
        geo_result += "[+] City: {}\n".format(response['city'])
        geo_result += "[+] State: {}\n".format(response['state'])
    except:
        pass

    print(geo_result)
    input("\nPress Enter to continue...")
    footprinting_menu()


def get_shodan_info():
    ip = input("Enter the IP for Shodan search: ")
    print("[+] Getting info from Shodan for IP {}".format(ip))

    shodan_result = ''
    api = shodan.Shodan("yEfgH1rg8p76Wgmivf9rpQ2iwFP0FiQ3")

    try:
        results = api.search(ip)
        shodan_result += "[+] Results found: {}\n".format(results['total'])

        for result in results['matches']:
            shodan_result += "[+] IP: {}\n".format(result['ip_str'])
            shodan_result += "[+] Data:\n{}\n\n".format(result['data'])

    except shodan.APIError as e:
        print("Error: {}".format(e))

    print(shodan_result)
    input("\nPress Enter to continue...")
    footprinting_menu()

#-------------------------------------------------------------------------------------------------------

def about():
    clear_screen()

    clear_screen()
    os.system('figlet -f future -c About | lolcat')
    os.system('figlet -f future -c Linux Pentest Suite | lolcat')
    print("\n")
    os.system('echo "LPS (Linux Pentest Suite) is a powerful framework for Linux security." | lolcat')
    os.system('echo "It provides various tools and modules for port scanning, footprinting," | lolcat')
    os.system('echo "directory brute force, and hash cracking. LPS empowers security professionals" | lolcat')
    os.system('echo "and ethical hackers to assess and fortify Linux systems." | lolcat')
    print("\n")

    os.system('echo "Developer : Silvr_Knight" | lolcat')
    os.system('echo ')
    os.system('echo "You can Look out for me here," | lolcat')
    os.system('echo ')
    os.system('echo "Github : @SilvrKnight" | lolcat')
    os.system('echo "Twitter : Silvr_Knight" | lolcat')
    os.system('echo "Instagram : Silvr_Knight" | lolcat')


    input("\nPress Enter to continue...")
    main_menu()

#-------------------------------------------------------------------------------------------------------

def quit_framework():
    clear_screen()
    os.system('figlet -f future -c Goodbye! | lolcat')
    print("Thank you for using Linux Pentest Suite!")
    print("Goodbye!")
    sys.exit()

#-------------------------------------------------------------------------------------------------------

if __name__ == "__main__":
    main_menu()
